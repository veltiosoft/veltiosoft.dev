{"version":3,"sources":["reportWebVitals.ts","components/atoms/task/Task.tsx","pages/tracker/Tracker.tsx","repositories/localStrage.ts","Sink.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Task","props","taskName","handler","Box","className","display","justifyContent","Button","onClick","Tracker","repo","useState","setTaskName","getTime","time","setTime","getCurrentTaskName","currentTaskName","setCurrentTaskName","getIsWorking","isWorking","setIsWorking","getHistory","history","setHistory","getLogs","logs","setLogs","switchTask","stopTask","Date","now","act","newHistory","filter","v","addHistory","stopTime","newLog","start","end","duration","handleClick_playButton","formatDate","length","startHour","getHours","endHour","slice","flexDirection","TextField","id","value","onChange","event","target","label","map","t","ret","i","prev","forEach","log","push","formatLogs","reverse","repository","localStorage","setItem","parseInt","getItem","JSON","stringify","parse","Sink","fallback","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c6581ad.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\nimport './Task.css';\n\nexport function Task(props: { taskName: string, handler: (taskName: string) => void }) {\n    const { taskName, handler } = props\n    return (\n        <Box className=\"task\" display=\"flex\" justifyContent=\"space-between\">\n            <div>{taskName}</div>\n            <Button onClick={() => { return handler(taskName) }}>\n                <span className=\"material-icons\">play_arrow</span>\n            </Button>\n        </Box>\n    );\n}\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { Task } from '../../components/atoms/task/Task';\nimport { Log } from '../../interfaces/log';\nimport { IRepository } from '../../interfaces/IRepository';\n\n\nexport function Tracker(props: { repo: IRepository }) {\n    const { repo } = props\n    const [taskName, setTaskName] = useState('')\n    const [time, setTime] = useState(repo.getTime())\n    const [currentTaskName, setCurrentTaskName] = useState(repo.getCurrentTaskName())\n    const [isWorking, setIsWorking] = useState(repo.getIsWorking())\n    const [history, setHistory]: [string[], Dispatch<SetStateAction<string[]>>] = useState(repo.getHistory())\n    const [logs, setLogs]: [Log[], Dispatch<SetStateAction<Log[]>>] = useState(repo.getLogs)\n\n    const handleChange_taskName = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTaskName(event.target.value);\n    };\n\n    const act = (taskName: string): void => {\n        setCurrentTaskName(taskName)\n        repo.setCurrentTaskName(taskName)\n\n        const time = Date.now()\n        setTime(time)\n        repo.setTime(time)\n\n        setIsWorking(true)\n        repo.setIsWorking(true)\n\n        setTaskName('')\n    }\n\n    const addHistory = (taskName: string): void => {\n        const newHistory = [taskName, ...history.filter(v => v !== taskName)]\n\n        setHistory(newHistory)\n        repo.setHistory(newHistory)\n    }\n\n    const switchTask = (taskName: string): void => {\n        if (currentTaskName === taskName || taskName === '') { return setTaskName('') };\n\n        if (isWorking) { stopTask() }\n\n        act(taskName)\n\n        addHistory(taskName)\n    }\n\n    const stopTask = (): void => {\n        const stopTime = Date.now()\n        const log: Log = {\n            taskName: currentTaskName,\n            start: time,\n            end: stopTime,\n            duration: stopTime - time,\n        }\n        const newLog = [log, ...logs]\n\n        setLogs(newLog)\n        repo.setLogs(newLog)\n\n        setIsWorking(false)\n        repo.setIsWorking(false)\n\n        setCurrentTaskName('')\n        repo.setCurrentTaskName('')\n    }\n\n    const handleClick_actButton = () => {\n        switchTask(taskName)\n    }\n    const handleClick_playButton = (taskName: string) => {\n        switchTask(taskName)\n    }\n    const handleClick_stopButton = () => {\n        stopTask()\n    }\n\n    const formatLogs = (logs: Log[]): Log[][] => {\n        if (logs.length === 0) return [[]];\n\n        const ret: Log[][] = [[]]\n        let i = 0\n        let prev = new Date(logs[0].start).getHours()\n        logs.forEach((log: Log) => {\n            const start = new Date(log.start).getHours()\n            if (prev === start) {\n                ret[i].push(log)\n            } else if (ret[i].length === 0) {\n                ret[i].push(log)\n                prev = start\n            } else {\n                i++\n                ret[i] = []\n                prev = start\n            }\n        })\n        return ret\n    }\n    const formatDate = (logs: Log[]): string => {\n        if (logs.length === 0) return '';\n        const startHour: number = new Date(logs[0].start).getHours()\n        const endHour: number = new Date(logs.slice(-1)[0].end).getHours()\n        return `# ${startHour}:00 - ${endHour + 1}:00`;\n    }\n    return (\n        <Box display=\"flex\" className=\"Tracker\">\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Box display=\"flex\">\n                    Task: {currentTaskName}\n                    {isWorking ? <Button onClick={handleClick_stopButton}><span className=\"material-icons\">stop</span></Button> : void 0}\n                </Box>\n                <Box display=\"flex\">\n                    <TextField\n                        id=\"standard-basic\"\n                        value={taskName}\n                        onChange={handleChange_taskName}\n                        label=\"new task\" />\n                    <Button onClick={handleClick_actButton}>act</Button>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\">\n                    {history.map(t => <Task taskName={t} handler={handleClick_playButton}></Task>)}\n                </Box>\n            </Box>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <div>Logs</div>\n                {formatLogs(logs).reverse().map(logs =>\n                    <div>\n                        <div>{formatDate(logs)}</div>\n                        {logs.reverse().map(log => <div>- {log.taskName}</div>)}\n                    </div>)}\n            </Box>\n        </Box>\n    );\n}\n","import { IRepository } from '../interfaces/IRepository'\nimport { Log } from '../interfaces/log'\n\nexport const repository: IRepository = {\n    setTime: (time: number) => {\n        localStorage.setItem('time', `${time}`)\n    },\n    getTime: () => {\n        return parseInt(localStorage.getItem('time') || '0')\n    },\n    setCurrentTaskName: (currentTaskName: string) => {\n        localStorage.setItem('currentTaskName', currentTaskName)\n    },\n    getCurrentTaskName: () => {\n        return localStorage.getItem('currentTaskName') || ''\n    },\n    setIsWorking: (isWorking: boolean) => {\n        localStorage.setItem('isWorking', `${isWorking}`)\n    },\n    getIsWorking: () => {\n        return localStorage.getItem('isWorking') === 'true'\n    },\n    setHistory: (history: string[]) => {\n        localStorage.setItem('history', JSON.stringify(history))\n    },\n    getHistory: () => {\n        return JSON.parse(localStorage.getItem('history') || '[]')\n    },\n    setLogs: (logs: Log[]) => {\n        localStorage.setItem('logs', JSON.stringify(logs))\n    },\n    getLogs: () => {\n        return JSON.parse(localStorage.getItem('logs') || '[]')\n    },\n}","import React, { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Tracker } from './pages/tracker/Tracker';\nimport { repository } from './repositories/localStrage';\n\nexport function Sink() {\n    return (\n        <BrowserRouter>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Switch>\n                    <Route exact path=\"/\" render={() => <Tracker repo={repository} />}></Route>\n                </Switch>\n            </Suspense>\n        </BrowserRouter>\n    );\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Sink } from './Sink';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Sink />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}